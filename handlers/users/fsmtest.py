from aiogram import types
from aiogram.dispatcher import FSMContext
from loader import dp
from aiogram.dispatcher.filters import Command
from states import TestFsm  # my class
from keyboards.inline.inline_kb import ikb_no_eat

'''
–ú–∏–Ω–∏ —Ç–µ—Å—Ç-–æ–ø—Ä–æ—Å –¥–ª—è FSM

–ó–∞–¥–∞–º —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞:
-–¢–≤–æ–µ –∏–º—è
-–õ—é–±–∏–º–∞—è –º–æ–¥–µ–ª—å –∞–≤—Ç–æ
-–õ—é–±–∏–º–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Å–≤–µ—Ç–∞
'''


@dp.message_handler(Command('fsmt'))
async def my_fsm1(message: types.Message):
    await message.answer('–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ—é fsm,\n–¢–≤–æ–µ –∏–º—è?')
    await TestFsm.test1.set()


@dp.message_handler(state=TestFsm.test1)
async def my_state1(message: types.Message, state: FSMContext):
    answer = message.text

    await state.update_data(test1=answer)

    await message.answer('–õ—é–±–∏–º–∞—è –º–æ–¥–µ–ª—å –∞–≤—Ç–æ') #–≥–¥–µ —Ç–æ –±—ã–ª replay
    await TestFsm.test2.set()


@dp.message_handler(state=TestFsm.test2)
async def my_state2(message: types.Message, state: FSMContext):
    answer2 = message.text

    await state.update_data(test2=answer2)

    await message.answer('–õ—é–±–∏–º–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Å–≤–µ—Ç–∞')
    await TestFsm.test3.set()


@dp.message_handler(state=TestFsm.test3)
async def my_state3(message: types.Message, state: FSMContext):
    answer3 = message.text

    await state.update_data(test3=answer3)

    # –¥–æ—Å—Ç–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    data = await state.get_data()
    name = data.get('test1')
    avto = data.get('test2')
    sideWorld = data.get('test3')

    await message.answer(
        f'–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n'
        f'–¢–≤–æ–µ –∏–º—è: {name}\n'
        f'–õ—é–±–∏–º–æ–µ –∞–≤—Ç–æ: {avto}\n'
        f'–õ—é–±–∏–º–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Å–≤–µ—Ç–∞: {sideWorld}\n'
    )

    await state.finish()
    await message.answer('üëΩ –ü–æ–∫–∞ –≤—Ä–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ',reply_markup=ikb_no_eat)
