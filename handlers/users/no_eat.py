from aiogram import types
from loader import dp
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import text, bold, italic
from aiogram.types import ParseMode
import time
from keyboards.inline.inline_kb import(
    ikb_no_eat
    )
from keyboards.default import first_kb
from .dixy import dixy_data
import json
from states import TestFsm  # my class


'''
–í—Å–µ –•—ç–Ω–¥–ª–µ—Ä—ã (–ò–Ω–ª–∞–π–Ω) –Ω–µ —Å–≤–∑—è–∞–Ω–Ω—ã–µ —Å –≤–µ—Ç–∫–æ–π –µ–¥—ã 
'''


@dp.message_handler(text='–ù–µ—Ç, —Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–µ–Ω—è —É–∂–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!')
async def no_eat(message: types.Message):        
    await message.answer(text='ü™ê –ò–Ω–ª–∞–π–Ω —Ä–∞–∑–¥–µ–ª', reply_markup=ikb_no_eat)


@dp.callback_query_handler(text='–ó–∞–≥–ª—É—à–∫–∞')
async def plug(call: CallbackQuery):
    await call.answer('üë®üèº‚Äçüíª –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–ª—É—à–∫–∞', show_alert=True)


@dp.callback_query_handler(text='fsmt')
async def my_fsm1(call: CallbackQuery):
    
    # —É–¥–∞–ª—è—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 
    await call.message.answer(text='–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ—é fsm,\n–¢–≤–æ–µ –∏–º—è?', reply_markup=types.ReplyKeyboardRemove())
    
    
    
    # –æ—Ç–∫—Ä—ã–ª –Ω–∞ –∑–∞–ø–∏—Å—å FSM, –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ fsmtest.py
    await TestFsm.test1.set()
    

@dp.callback_query_handler(text='Scraping')
async def sraping_dixy(call: CallbackQuery):    
    
    # –∞–∫—Ç–∏–≤–∏—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    dixy_data()

    # —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
    msg = text(bold('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö Dixy \n–ó–¥–µ—Å—å —è –ø—Ä–∏–º–µ–Ω–∏–ª –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ bold'))
    msg2 = text(italic('...—Å–µ–π—á–∞—Å –≤—ã–≤–µ–¥–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã \n–ó–¥–µ—Å—å —è –ø—Ä–∏–º–µ–Ω–∏–ª –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ italic.'))
    msg3 = text(bold('–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω—á–µ–Ω!'))

    # –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞—É–∑–∞–º–∏, —Ç—è–Ω—É –≤—Ä–µ–º—è, —á—Ç–æ –±—ã —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞
    await call.message.answer(msg, parse_mode=ParseMode.MARKDOWN)
    time.sleep(1)
    await call.message.answer(msg2, parse_mode=ParseMode.MARKDOWN)
    time.sleep(2)

    # —á–∏—Ç–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π json
    with open('dixy_data/all_data_dixy.json') as file:
        data = file.read()
        json_data = json.loads(data)
    res = json.dumps(json_data, indent=4, ensure_ascii=False)

    # –≤—ã–≤–æ–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä
    await call.message.answer(res)

    await call.message.answer(msg3, parse_mode=ParseMode.MARKDOWN, reply_markup=ikb_no_eat)
    await call.answer()


@dp.callback_query_handler(text='menu')
async def no_eat(call: CallbackQuery):        
    await call.message.answer(text='–ü—Ä–∏–≤–µ—Ç, –∂–µ–ª–∞–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –µ–¥—ã?', reply_markup=first_kb)
    await call.answer()
