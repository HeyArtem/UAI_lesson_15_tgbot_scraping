from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from keyboards.default import (drink_kb, first_kb, main_kb,
                               pizza_kb_fish_staffing, 
                               pizza_kb_fruit_staffing,
                               pizza_kb_kind, 
                               pizza_kb_meat_staffing,
                               pizza_kb_size
                               )
from keyboards.inline import yes_or_no_kb
from loader import dp
from states import MenuFsm  # my class


'''
–•—ç–Ω–¥–ª–µ—Ä—ã –æ—Ç –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–±–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—ã—Ä—ã), —Ä–∞–∑–¥–µ–ª –ü–∏—Ü—Ü–∞ 
–ª–æ–≤—è—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—é –≤ fsm
'''


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(text='/start')
async def command_start(message: types.Message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}! \n'
        f'–¢–≤–æ–π id: {message.from_user.id}\n\n'
        f'–≠—Ç–æ—Ç tg_bot, –¥–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ò–Ω—Ç–µ–ª–µ–∫—Ç–∞, –ª–µ–∫—Ü–∏—è ‚Ññ15.\n\n'
        f'–¢–µ–º–∞: –ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø–∏—Ç–∫–∏ –∏ –µ–¥—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞, —É—Ç–æ—á–Ω—è–µ—Ç –∞–¥—Ä–µ—Å –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n'        
        f'–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å \n(! –∏–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å  ) –∫–æ–º–∞–Ω–¥—É \n\n/menu'        
        )


# –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ (–∑–∞–∫–∞–∑ –µ–¥—ã –∏–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ)
@dp.message_handler(Command("menu"))
async def menu(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –∂–µ–ª–∞–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –µ–¥—ã?', reply_markup=first_kb)
    

# –≤—ã–≤–æ–¥ –º–µ–Ω—é (–ü–∏—Ü—Ü–∞, –ü–∞—Å—Ç–∞, –Ω–∞–ø–∏—Ç–∫–∏....)
@dp.message_handler(text='–î–∞ –∫–æ–Ω–µ—á–Ω–æ!')
async def menu_select(message: types.Message, state: FSMContext):   
    await message.answer('–í—Å–µ –∫—É—Ö–Ω–∏ –º–∏—Ä–∞ –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º!', reply_markup=main_kb)

    # –æ—Ç–∫—Ä—ã–ª –Ω–∞ –∑–∞–ø–∏—Å—å test1 = State()
    await MenuFsm.test1.set()


# –≤—ã–≤–æ–¥ –º–µ–Ω—é –ú—è—Å–Ω–∞—è, –†—ã–±–Ω–∞—è, –§—Ä—É–∫—Ç–æ–≤–∞—è.. !–∫–æ–º–∞–Ω–¥–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!
@dp.message_handler(text=('–ü–∏—Ü—Ü–∞'), state=MenuFsm.test1)
async def menu_select1(message: types.Message, state: FSMContext):    
    await message.reply(f'{message.from_user.full_name}, !–∑–¥–µ—Å—å —è –ø—Ä–∏–º–µ–Ω–∏–ª —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –Ω–∞—á–∏–Ω–∫–∞–º', reply_markup=pizza_kb_kind)

    # –∑–∞–ø–∏—Å–∞–ª test1 = State()
    answer = message.text
    await state.update_data(test1=answer)
    
    # –∫–æ–Ω—Ç—Ä. —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    data = await state.get_data()
    step1 = data.get('test1') # –ó–î–ï–°–°–¨ –¢–û–õ–¨–ö–û –ó–ê–ü–ò–°–ê–õ–°–Ø –ò –í–´–í–ï–õ–°–Ø TEST1      
    # print(f'state1: {step1}\n')

     # –æ—Ç–∫—Ä—ã–ª –Ω–∞ –∑–∞–ø–∏—Å—å test2 = State() (–º—è—Å–Ω–∞—è –∏–ª–∏ –∏–∑ —Ä—ã–±–Ω–∞—è, —Ñ—Ä–∫—Ç–æ–≤–∞—è)
    await MenuFsm.test2.set()


# –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä  –º—è—Å–Ω—ã—Ö –Ω–∞—á–∏–Ω–æ–∫ –¥–ª—è –ø–∏—Ü—Ü—ã
@dp.message_handler(text=('–ú—è—Å–Ω–∞—è'), state=MenuFsm.test2)
async def taste_pizza(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–∫–∞ –≤—Å–µ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—á–∏–Ω–∫–∞–º:', reply_markup=pizza_kb_meat_staffing)

    # –∑–∞–ø–∏—Å–∞–ª test2 = State()
    answer = message.text
    await state.update_data(test2=answer)    

     # –æ—Ç–∫—Ä—ã–ª –Ω–∞ –∑–∞–ø–∏—Å—å test3 = State() (–Ω–∞—á–∏–Ω–∫–∞)
    await MenuFsm.test3.set()


# –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä  —Ä—ã–±–Ω—ã—Ö –Ω–∞—á–∏–Ω–æ–∫ –¥–ª—è –ø–∏—Ü—Ü—ã
@dp.message_handler(text=('–†—ã–±–Ω–∞—è'), state=MenuFsm.test2)
async def taste_pizza(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–∫–∞ –≤—Å–µ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—á–∏–Ω–∫–∞–º:', reply_markup=pizza_kb_fish_staffing)

    # –∑–∞–ø–∏—Å–∞–ª test2 = State()
    answer = message.text
    await state.update_data(test2=answer)

     # –æ—Ç–∫—Ä—ã–ª –Ω–∞ –∑–∞–ø–∏—Å—å test3 = State() (–Ω–∞—á–∏–Ω–∫–∞)
    await MenuFsm.test3.set()


# –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä  —Ñ—Ä—É–∫—Ç–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–æ–∫ –¥–ª—è –ø–∏—Ü—Ü—ã
@dp.message_handler(text=('–§—Ä—É–∫—Ç–æ–≤–∞—è'), state=MenuFsm.test2)
async def taste_pizza(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–∫–∞ –≤—Å–µ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—á–∏–Ω–∫–∞–º:', reply_markup=pizza_kb_fruit_staffing)
    
    # –∑–∞–ø–∏—Å–∞–ª test2 = State()
    answer = message.text
    await state.update_data(test2=answer)

     # –æ—Ç–∫—Ä—ã–ª –Ω–∞ –∑–∞–ø–∏—Å—å test3 = State() (–Ω–∞—á–∏–Ω–∫–∞)
    await MenuFsm.test3.set()


# –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∏–Ω–∫–∏ –ø–µ—Ä–µ–∫–¥—é—á–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
dict_staffing = ['–°—ã—Ä–Ω–∞—è —Å –≤–µ—Ç—á–∏–Ω–æ–π', '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏ –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏', '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏', '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏ –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏', '–í–µ—Ç—á–∏–Ω–∞ –∏ –≥—Ä–∏–±—ã', '–ß–∏–∫–µ–Ω BBQ', '–î–∏–∞–±–ª–æ', '–õ–æ—Å–æ—Å—å ü¶à', '–ö—Ä–µ–≤–µ—Ç–∫–∏ ü¶ê', '–ú–∏–¥–∏–∏ üêô', '–ú–æ—Ä—Å–∫–∏–µ —Ç–≤–∞—Ä–∏ ü¶ë', '–ê–Ω–∞–Ω–∞—Å', '–ê–ø–µ–ª—å—Å–∏–Ω', '–ú–∞–Ω–≥–æ', '–§—Ä—É–∫—Ç–æ–≤–æ–µ –∞—Å—Å–æ—Ä—Ç–∏']

@dp.message_handler(Text(equals=dict_staffing, ignore_case=True), state=MenuFsm.test3)
async def size_pizza(message: types.Message, state: FSMContext):
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä—á–∏–∫ –ø–∏—Ü—Ü—ã:', reply_markup=pizza_kb_size)

    # –∑–∞–ø–∏—Å–∞–ª test3 = State()
    answer = message.text
    await state.update_data(test3=answer)

    # –æ—Ç–∫—Ä—ã–ª –Ω–∞ –∑–∞–ø–∏—Å—å test4 = State() (—Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã)
    await MenuFsm.test4.set()

   
# –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –Ω–∞–ø–∏—Ç–∫–∞
dict_size = ['–ë–æ–ª—å—à–∞—è 50 —Å–º. (900 –≥—Ä.)', '–°—Ä–µ–¥–Ω—è—è 30 —Å–º. (600 –≥—Ä.)']

@dp.message_handler(Text(equals=dict_size, ignore_case=True), state=MenuFsm.test4)
async def drinks_menu(message: types.Message, state: FSMContext):
    await message.reply('–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –∏–∑ –Ω–∞–ø–∏—Ç–∫–æ–≤?', reply_markup=drink_kb)

    # –∑–∞–ø–∏—Å–∞–ª test4 = State()
    answer = message.text
    await state.update_data(test4=answer)

    # –æ—Ç–∫—Ä—ã–ª –Ω–∞ –∑–∞–ø–∏—Å—å test5 = State() (—Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã)
    await MenuFsm.test5.set()


# –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞, –∑–∞–ø–∏—Å—ã–≤–∞—é –∏ –∑–∞–∫—Ä—ã–≤–∞—é –∑–∞–ø–∏—Å—å
dict_drinks = ["Pepsi 0.5", "7UP 0.5", "Pepsi Max 0.5", "Aqua Minerale 0.5", "Lipton 0.5", "Adrenaline Rush 0.25"]

@dp.message_handler(Text(equals=dict_drinks, ignore_case=True), state=MenuFsm.test5)
async def drinks_menu(message: types.Message, state: FSMContext):

    # –∑–∞–ø–∏—Å–∞–ª test5 = State()
    answer = message.text
    await state.update_data(test5=answer)
            
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ—ã –∫–ª–∏–µ–Ω—Ç—É    
    data = await state.get_data()
    step1 = data.get('test1') 
    step2 = data.get('test2') 
    step3 = data.get('test3') 
    step4 = data.get('test4') 
    step5 = data.get('test5') 

    await message.answer(            
        f'{message.from_user.full_name}, —Ç–≤–æ–π –≤—ã–±–æ—Ä:\n'
        f'{step1}\n'
        f'{step2}\n'
        f'{step3}\n'
        f'{step4}\n'
        f'{step5}\n'
        f'\n–í—Å–µ –≤–µ—Ä–Ω–æ?\n', reply_markup=yes_or_no_kb
    )

    # –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∏ state
    await state.finish()
